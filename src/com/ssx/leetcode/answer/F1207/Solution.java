package com.ssx.leetcode.answer.F1207;

import java.util.*;

public class Solution {
    public Solution(){
        int[] A = {-116,131,-165,480,-549,6,780,-883,-45,-409,-894,-229,808,657,-533,-621,-293,-947,-834,-339,475,-157,289,113,758,791,586,109,-948,-256,-838,564,-135,92,-444,-434,-851,681,-212,-282,502,787,151,140,-319,-378,224,-719,-264,-858,-699,51,949,-535,-514,-375,374,128,620,-55,550,-218,463,579,625,457,464,-402,-290,925,-567,662,-309,839,-565,-659,-435,-62,99,934,-237,693,446,-473,-454,-630,-780,-890,812,-146,-674,586,80,829,559,-331,-615,578,-58,146,-174,450,529,270,-294,201,-132,8,-711,-768,-334,846,-944,-703,-633,208,-840,-459,177,397,934,49,-668,890,-599,853,-826,-723,694,-512,376,-465,267,250,-342,-318,71,-216,-924,-743,-478,-537,551,-970,-333,923,-54,348,915,858,144,-485,843,-517,337,485,-278,869,-497,97,385,25,-660,557,-708,-593,839,33,793,161,86,791,-484,-791,-682,852,426,-387,620,-538,-840,364,89,282,675,-669,-350,-140,-511,-876,988,-939,186,366,90,804,-976,601,-915,-334,-529,-599,894,617,774,163,282,-418,872,-205,731,-370,-577,-397,-933,-195,-516,-222,-421,-410,996,878,198,452,-404,-232,632,492,-746,501,819,687,-377,563,-87,-544,-298,-433,838,514,-186,-786,-936,262,759,940,-833,-24,-282,-464,340,-41,875,433,741,-58,312,654,-499,968,-374,30,-638,472,459,-980,-766,-395,-97,743,987,-674,-911,-853,-688,-950,752,-741,800,348,231,-476,-587,-642,-631,841,452,769,-684,-276,-398,-364,306,487,382,-954,-637,971,686,-890,227,-464,-256,793,-102,474,-82,-822,490,931,-450,-729,-712,-65,-598,743,986,-390,865,-658,-166,-264,691,761,129,815,-894,131,-864,439,950,180,-357,195,-657,-634,-134,-335,1,19,-856,-748,-277,-145,276,-331,793,-742,293,-249,-520,-524,-548,369,-493,773,-223,-865,705,699,859,-743,-851,374,282,373,516,668,897,-836,241,629,-937,929,-296,-407,-782,402,25,-609,-488,271,585,758,665,548,-236,219,-836,-772,-920,199,278,-63,-453,340,-974,-710,-183,-536,653,-181,206,545,-220,865,-952,-927,-472,433,379,468,984,-851,521,-31,-100,-116,645,971,28,-693,112,193,354,-939,-981,960,-260,700,-531,-667,-984,-479,-387,-600,35,-275,848,562,-396,470,-956,-112,-9,304,637,-753,647,-90,-902,-477,-138,-403,481,209,803,380,-219,604,912,-827,843,-254,-289,-854,-559,520,-527,-301,-819,699,-157,74,-285,-759,-100,-577,982,-218,-987,535,822,877,24,341,848,451,759,825,-796,-423,727,685,-734,916,598,-20,-641,-300,-828,680,816,670,631,753,375,-307,-223,676,-435,17,661,654,220,-420,47,807,-149,502,-737,189,633,468,70,-131,-17,-707,-971,473,382,245,650,118,980,49,66,-216,113,-775,-226,956,202,-994,-547,-300,-64,-331,567,-576,606,692,-940,-644,-415,17,672,27,596,-292,777,-922,958,688,379,989,-841,-93,218,576,-345,-722,-653,-839,930,-44,-22,512,-851,-625,450,-741,538,-412,397,618,632,-795,-408,-966,-799,-455,-435,863,-864,465,-147,-472,134,-303,626,-561,-12,-969,96,-112,-131,117,467,-669,-575,407,994,979,993,-888,-964,502,466,571,731,-50,915,471,-889,178,875,-949,-501,172,-75,-847,-611,534,-818,155,-248,6,-28,509,-632,-988,-145,871,-296,-865,-651,-339,-866,65,-393,470,-553,387,-882,726,-183,578,-733,-955,832,156,291,226,343,-22,-50,527,768,-884,-85,868,-369,854,271,-746,-559,-833,269,221,-625,-879,-402,176,493,-287,731,751,536,-325,881,560,-330,-64,-345,-377,558,-759,-740,-1000,-739,-254,-75,-345,146,-762,-282,-698,-859,-956,587,455,-902,-910,-798,-108,652,605,-533,569,-699,543,191,428,814,982,42,227,-406,-113,-789,-130,956,-925,186,892,408,777,-554,-87,92,-314,-648,209,450,434,-177,-847,-196,100,-558,-543,-90,-612,-285,-28,504,605,778,332,-855,-497,-185,887,-575,-210,907,360,-416,905,-643,-813,476,-482,-939,379,-694,651,418,348,125,-793,-468,894,447,140,256,-325,-918,214,724,765,-327,-812,-650,-517,557,309,-41,619,-928,-276,78,-810,743,-501,-600,745,-313,814,-98,-977,-177,623,310,-840,404,-910,654,-663,-373,709,16,-121,548,158,-542,-697,-714,-920,692,-630,-481,-929,667,-438,436,-561,53,280,-498,787,949,704,271,-149,-230,345,208,987,541,591,972,-309,-592,671,402,911,426,-101,-422,316,100,-368,41,-126,275,-925,730,22,-683,578,43,-896,737,918,-797,718,-945,668,343,-341,-5,374,-132,639,880,-634,542,745,649,541,456,287,-737,594,-341,273,801,-609,769,-900,518,-942,-975,-996,-337,937,-688,-701,-721,36,-345,-362,-193,-709,-953,-877,-449,953,250,217,-255,570,-445,-792,-341,674,38,-613,473,431,292,-469,813,-296,-788,701,-94,731,-840,488,787,62,480,734,518,-875,925,690,-958,-791,-761,-483,-435,-256,-894,-762,-245,-569,-660,628,558,-15,278,231,412,-936,172,-629,208,-171,224,301,10,-236,-910,42,-664,391,-227,799,-677,138,925,910,-504,42,10,884,816,407,302,632,428,-497,813,-134,210,-590};
        uniqueOccurrences(A);
    }
//    public boolean uniqueOccurrences(int[] arr) {
//        Map<Integer,Integer> map = new HashMap<>();
//        for(int a:arr){
//           map.put(a,map.getOrDefault(a,0) +1);
//        }
//        Set<Integer> set = new HashSet<>();
//        for(Map.Entry<Integer,Integer> a:map.entrySet()){
//            set.add(a.getValue());
//        }
//        return map.size() == set.size();
//    }

    //    fastest
    public boolean uniqueOccurrences(int[] arr) {
        Set<Integer> set = new HashSet<>();
        Arrays.sort(arr);
        int count = 1;
        for(int i = 1;i < arr.length;i ++){
            if(arr[i] != arr[i - 1]){
                if(!set.add(count)){
                    return false;
                }
                count = 1;
            }else{
                count ++;
            }
        }
        if(!set.add(count)){
            return false;
        }
        return true;
    }
}
